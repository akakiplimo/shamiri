// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(cuid())
  clerkUserId  String     @unique
  email        String     @unique
  name         String?
  imgUrl       String?
  categories   Category[]
  entries      Entry[]
  currentDraft Draft?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  entries     Entry[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([name, userId])
}

model Entry {
  id           String    @id @default(cuid())
  title        String
  content      String    @db.Text
  mood         String
  moodScore    Int
  moodImageUrl String?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  category     Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Draft {
  id        String   @id @default(cuid())
  title     String?
  content   String?  @db.Text
  mood      String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique // Only one draft per user
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
